class Solution:
    def removeNthFromEnd(self, head: ListNode, n: int) -> ListNode:
        if not head:
            return
        temp_stack = []
        p = head
        while(True):
            temp_stack.append(p.val)
            if p.next == None:
                break
            p = p.next

        a = temp_stack[:len(temp_stack)-n]
        a.extend(temp_stack[len(temp_stack)-n+1:])

        if a == []:
            return []
        ans = ListNode(a[0])
        p = ans
        for i in range(1,len(a)):
            p.next=ListNode(a[i])
            p = p.next
        return ans
        
 if __name__ == '__main__':
    a = Solution()
    l = [1,2]
    head = ListNode(l[0])
    p = head
    for i in range(1,len(l)):
        p.next = ListNode(l[i])
        p=p.next
    print(a.removeNthFromEnd(head,2))

 思路：额外的空间存储数值，删除后再重建链表，后续可用快慢指针实现一次
 
 知识点：python初始化链表不是很方便，是否有其他方案？
