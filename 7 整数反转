给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。


class Solution:
    def reverse(self, x: int) -> int:
        if x < 0:
            symbol = 'neg'
            a = -x
        else:
            symbol = 'pos'
            a = x
        c = 0
        while(a != 0):
            ''' 该条件在题目描述的环境中不能使用
            if(c > c * 10 + a % 10):
                return 0
            '''
            c = c * 10 + a % 10
            a //=10
        if(c < -2**31 or c > 2**31-1):
            return 0
        if symbol == 'neg':
            return -c
        else:
            return c

if __name__ == '__main__':
    a = Solution()
    print(a.reverse(1534236469))
    
    
思路：一开始想正数及负数使用统一的取余计算，但由于python对于取余都是向下取整的，导致负数取余逻辑与正数取余不同。因此统一转换为正数后再处理
方案：
知识点： 
        1/a的幂 a ** n
        2/python 取余 a % b = a - (a//b) * b
          r = m // n, 而且始终取下, 即math.floor(r),且同号正, 异号负, 5 // -3 = -2, 5 // 3 = 1
          那么, 令r = floor(a // b) 
          a > 0, b > 0, a - (a // b) * b = a - {取下值的正数, 故a > r * b} * b = 正数
          a > 0, b < 0, a - (a // b) * b = a - {取下值的负数, 故a < r * b} * b = 负数
          a < 0, b > 0, a - (a // b) * b = a - {取下值的负数, 故a > r * b} * b = 正数
          a < 0, b < 0, a - (a // b) * b = a - {取下值的正数, 故a < r * b} * b = 负数

          特别注意负数取余
          当 a为 -148 b 为10 时
          取余结果为 -148 - (-148 // 10) * 10
                   =-148 - -150
                   = 2
          当 a为 -144 b 为10 时
          取余结果为 -144 - (-144 // 10) * 10
                   =-144 - -150
                   =6
